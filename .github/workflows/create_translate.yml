name: Create Translation Issues for zh Directory

on:
  # 允许手动触发工作流
  workflow_dispatch:
    inputs:
      target-branch:
        description: 'Branch to checkout for running the script'
        required: false
        default: 'gh-pages'

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.target-branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: pip install requests

      - name: Run script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          python - <<EOF
          import requests
          import os
          import glob

          # 设置 GitHub 仓库信息和认证信息
          GITHUB_API_URL = "https://api.github.com/repos/{owner}/{repo}/issues"
          OWNER = os.getenv("OWNER")
          REPO = os.getenv("REPO")
          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

          headers = {
              "Authorization": f"token {GITHUB_TOKEN}",
              "Accept": "application/vnd.github.v3+json"
          }

          # 定义目标目录
          target_folder = "site/zh"

          # 获取目标目录下的所有 Markdown 文件
          files = glob.glob(f"{target_folder}/**/*.md", recursive=True)
          for file in files:
              issue_title = f"Translate {file} to Chinese"
              issue_body = f"请将 `{file}` 文件的内容翻译为中文。"
              data = {
                  "title": issue_title,
                  "body": issue_body
              }
              response = requests.post(GITHUB_API_URL.format(owner=OWNER, repo=REPO), headers=headers, json=data)
              if response.status_code == 201:
                  print(f"Successfully created issue for {file}")
              else:
                  print(f"Failed to create issue for {file}: {response.text}")
          EOF
