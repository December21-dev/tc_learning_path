{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Docs_like_code workflow learning","text":"<p>Thanks for your interest in the docs-like-code approach. This guide is designed to introduce you to this workflow within the realm of technical writing. It aims to help writers manage documentation as they would code, collaborate efficiently, and produce professional, accessible documents using tools such as Git, GitHub, Markdown, and open-source frames like MkDocs.</p>"},{"location":"#why-write-this-guide","title":"Why Write This Guide?","text":"<p>I have always wanted to create this guide on docs-like-code for three main reasons:</p> <ol> <li>To connect with like-minded individuals who want to develop projects together.</li> <li>To explore additional career opportunities for English learners.</li> <li>To contribute to the Open Source Community.</li> </ol>"},{"location":"#who-is-this-guide-for","title":"Who Is This Guide For?","text":"<p>This guide is intended for those who are students on the path of learning technical writing but totally new to either docs-like-code approach or git and GitHub.</p> <p>For the former, I hope this guide sparks your interest in the docs-like-code methodology, fostering further communication and mutual learning. For the latter, I hope this guide can bring you new ideas on your own workflow.</p> <p>Note</p> <p>This guide is finished by Ray, who are a normal student interested in Technical Writing. Designed for complete beginners to Git and aspiring open-source contributors, this introductory resource intentionally maintains a streamlined scope - it's not meant to be as comprehensive as traditional developer guides.  All the contents are based on my own experiences and perspectives, so if any mistakes are found, welcome to any feedback or contributions through the project's GitHub repository.</p>"},{"location":"intro-to-md/","title":"Getting Started with Markdown","text":""},{"location":"intro-to-md/#what-is-markdown","title":"What is Markdown?","text":"<p>Markdown is a lightweight markup language that lets you format plain text using simple syntax. Files using Markdown have the <code>.md</code> extension and can be easily converted to HTML or other formats. Its human-readable format makes it perfect for documentation that needs to be both machine-processable and author-friendly.</p>"},{"location":"intro-to-md/#why-markdown-for-docs-as-code","title":"Why Markdown for Docs-as-Code?","text":"<p>When practicing docs-as-code, Markdown shines because:</p> <ul> <li>Collaboration Ready: Easy to read/write for both technical and non-technical contributors</li> <li>Toolchain Integration: Supported by all major platforms (GitHub, GitLab, etc.) and static site generators</li> <li>Low Barrier: Quick to learn compared to complex formatting tools</li> </ul>"},{"location":"intro-to-md/#essential-markdown-syntax","title":"Essential Markdown Syntax","text":"<p>Here are fundamental formatting patterns:</p> <pre><code># Header 1\n## Header 2\n### Header 3\n\n**Bold Text** or __Bold__\n*Italic Text* or _Italic_\n\n- Unordered List\n- With hyphens\n\n1. Ordered List\n2. With numbers\n\n[Link Text](https://example.com)\n\n![Alt Text](image.jpg)\n\n`Inline Code` \n</code></pre>"},{"location":"intro-to-md/#learn-more","title":"Learn More","text":"<p>Master Markdown through these resources: \ud83d\udd17 The Markdown Guide - Interactive tutorials and cheat sheet \ud83d\udd17 CommonMark Spec - Official syntax standardization</p>"},{"location":"introduction/","title":"Introduction of the guide","text":"<p>Before we start the detailed learning of docs-like-code workflow, let's take few minutes to understand it from a general perspective.</p> <p></p> <p>Most of the content in this guide is from the book Docs-Like-Code. I just make a simple summary of this book combined with my own experiences with this workflow.</p> <p>It advocates integrating documentation with development workflows, treating docs as code. It emphasizes version control, automation, and collaboration to manage documentation alongside code. Through examples, the book shows how to improve quality, maintainability, and teamwork, ideal for technical writers and developers.</p>"},{"location":"introduction/#why-treat-docs-like-code","title":"Why treat docs like code?","text":"<p>Treating docs like code means that make writing documents and writing codes the same way.</p> <p>Then, what does the way that code goes?</p> <p>Mostly, programmer write and manage code in the following process and tools:</p> <ol> <li>Edit code in an IDE(Integrated Development Environment) like Visual Studio Code.</li> <li>Store and review code with code hosting platform like GitHub</li> <li>Collaborate and manage different versions with Git Branches.</li> <li>Tracking issues in Github</li> <li>Publish automatically with CI/CD systems like Github Actions.</li> </ol> <p>Then, docs-like-code approach encourage us to write documents in the same process and related tools. You can see that this workflow leans heavily on Git and GitHub, which will be introduced in detail at other parts.</p> <p>For more detailed purposes and introduction, you can read the book Docs-Like-Code. This guide is mainly focused on practices.</p>"},{"location":"introduction/#structure-of-the-guide","title":"Structure of the guide","text":"<p>This guide is designed to help you master the Docs Like Code workflow through the following key sections:</p> <p>Note</p> <p>While the Docs-like-code workflow involves more than just tools like Git and GitHub, given the length of this document and GitHub's popularity, the focus here is primarily on Git and GitHub.</p> <ol> <li> <p>Git &amp; GitHub</p> <ul> <li>Introduction: Git and GitHub for version control.</li> <li>Collaboration workflows: Pull Requests, branching, and team collaboration</li> <li>GitHub Desktop: A graphical user interface for easier Git management</li> </ul> </li> <li> <p>Markdown Essentials</p> <ul> <li>Introduction: Markdown syntax for lightweight documentation.</li> <li>Advanced formatting: Tables, code blocks, diagrams ...</li> </ul> </li> <li> <p>Docs Like Code Workflow</p> <ul> <li>End-to-end workflow: From writing to publishing.</li> <li>Real-world examples: Explore open-source projects that use Docs Like Code.</li> <li>Hands-on practice: Create your first Pull Request and experience the \"Hello World\" of Docs Like Code.</li> </ul> </li> <li> <p>References &amp; Resources</p> <ul> <li>Curated tools: Open-source options like Sphinx, Docusaurus.</li> <li>Learning resources: Technical writing courses and community guidelines.</li> <li>Quick references: Templates and cheat sheets for efficient use.</li> </ul> </li> </ol>"},{"location":"preparation/","title":"Preparation","text":"<p>We need to sign up a GitHub account first and download two tools: GitHub Desktop and Visual Studio Code.</p>"},{"location":"preparation/#download-github-desktop","title":"Download GitHub Desktop","text":"<p>GitHub Desktop is a GUI(Graphic User Interface) application provided by GitHub that simplifies common Git operations, allowing users to manage Git repositories without using the command line. It is especially suitable for those who are not familiar with command-line tools(Clike to view download page).</p> <p></p> <p>GitHub DeskTop Download Page</p>"},{"location":"preparation/#a-github-account","title":"A GitHub Account","text":"<p>Visit GitHub website to create an account, then sign in to GitHub Desktop following the on-screen guidance. If no prompt appears, go to <code>File -&gt; Options -&gt; Accounts -&gt; Sign</code> in to log in.</p> <p></p> <p>GitHub Official Website</p>"},{"location":"preparation/#download-visual-studio-code","title":"Download Visual Studio Code","text":"<p>Visual Studio Code(or VSCode) is an IDE(Integrated Development Environment) used to edit documents. An IDE is a software application that provides comprehensive tools for writing and managing code, but here for documentation.</p> <p>Head to the official website of VSCode and Click download.</p> <p></p> <p>Visual Studio Code Download Page</p> <p>Note</p> <p>Please note that you may need to set up a VPN to ensure smooth access to certain websites.</p>"},{"location":"resources/","title":"Additional Resources","text":""},{"location":"resources/#online-courses-for-technical-writing","title":"Online courses for Technical Writing","text":"<ol> <li> <p>Google Technical Writing Course</p> <p></p> </li> <li> <p>CQUPT Technical Writing Course</p> <p></p> </li> </ol>"},{"location":"resources/#open-source-projects","title":"Open-source Projects","text":"<ol> <li> <p>Awesome Technical Writing</p> <ul> <li>This project is a curated list of awesome resourcesbooks, videos, articles about technical writing.</li> <li>There are various stuff about Technical Writing, like courses, books, communities, videos and so on.</li> </ul> </li> <li> <p>Beautiful Docs</p> <ul> <li>It's a list of docs and other developer resources that are particularly useful, well-written, and otherwise \"beautiful.\"</li> <li>This project has 3 sections dedicated to Beautiful Docs, Writing about Documentation and Tools for Generating Docs.</li> </ul> </li> <li> <p>MkDocs and catalog</p> <ul> <li> <p>MkDocs is a tool for generating docs. The website you are currently viewing is built using MkDocs.</p> </li> <li> <p>catalog is a curated list of noteworthy MkDocs projects, themes, and plugins. This is a valuable resource for anyone building a documentation site with MkDocs.</p> </li> </ul> </li> </ol>"},{"location":"resources/#wechat-official-accounts","title":"Wechat Official Accounts","text":"\u6280\u672f\u4f20\u64ad\u674e\u7433 \u6280\u672f\u4f20\u64ad\u7814\u7a76\u733f \u6280\u672f\u4f20\u64ad\u90a3\u4e9b\u4e8b\u513f"},{"location":"resources/#references","title":"References","text":"<ul> <li>Docs Like Code \u5168\u65b9\u4f4d\u6df1\u5ea6\u89e3\u8bfb\uff1a\u542b\u4e49\u3001\u4f18\u52a3\u52bf\u3001\u9002\u7528\u573a\u666f\u3001\u4e0e\u5176\u4ed6\u65b9\u6848\u5bf9\u6bd4</li> <li>Documentation of Mkdocs</li> </ul>"},{"location":"git-and-github/git-desktop/","title":"GitHub Desktop: Code-free Tools","text":"<p>In the previous sections, we introduced Git and its workflows, such as cloning, branching, committing, and pushing changes. While these operations are powerful, they often require typing commands in a terminal, which can be intimidating for beginners.</p> <p></p> <p>intimidating Git codes</p> <p>GitHub Desktop simplifies this process by providing a graphical interface for Git. It makes the entire workflow visual and intuitive, allowing you to focus on your work instead of memorizing commands.</p>"},{"location":"git-and-github/git-desktop/#why-use-github-desktop","title":"Why Use GitHub Desktop?","text":"<p>GitHub Desktop is designed to make Git more accessible, especially for those new to version control. Here's why it's so useful:</p> <ol> <li> <p>No Command Line Needed</p> <p>Perform all Git operations (e.g., cloning, branching, committing) through a user-friendly interface. Perfect for users who are not comfortable with terminal commands.</p> </li> <li> <p>Visualize Your Workflow</p> <p>See your repository's history, branches, and changes in a clear, graphical format. Easily track what you've done and what needs to be done next.</p> </li> </ol>"},{"location":"git-and-github/git-desktop/#next-steps","title":"Next Steps","text":"<p>Now that you understand how GitHub Desktop simplifies the Git workflow, let's dive into Markdown Essentials to learn how to write and format documentation effectively. In the Docs Like Code Workflow section, we'll explore how to use GitHub Desktop in a real-world documentation project.</p>"},{"location":"git-and-github/git-functions/","title":"Why We Use Git &amp; GitHub","text":"<p>We've already talked about that Git and GitHub are the foundation of Docs-like-code workflow. To understand why they are so powerful, let's break down how they work and how they enable version control and collaboration. In the first, we need to know the concept of the repository in Git.</p>"},{"location":"git-and-github/git-functions/#the-three-layers-of-git","title":"The Three Layers of Git","text":"<p>To contribute to a well-known project or an application's documentation, we submit our suggestions or modifications through Git's three layers.</p> <p>Just think of a repository as a project.</p> <ol> <li> <p>The Original Repository (on other's github account)</p> <p>This is the main project hosted on GitHub (e.g., a popular open-source project like VS Code).</p> <ul> <li>You can view the code and documentation, but you can't directly edit it.</li> <li>To contribute, you need to create your own copy.</li> </ul> </li> <li> <p>Your Forked Repository (on your github account)</p> <p>Forking creates a personal copy of the original repository under your GitHub account.</p> <ul> <li>This is where you can freely make changes without affecting the original project.</li> <li>Think of it as your own \"sandbox\" to experiment and contribute.</li> </ul> </li> <li> <p>Your Local Repository(on your local computer)</p> <p>This is the copy of the repository on your computer.</p> <ul> <li>You can edit files, test changes, and commit updates here.</li> <li>Once you're happy with your changes, you can push them back to your forked repository.</li> </ul> </li> </ol> <p>Then how the three layers enable git achieve version control and collaboration. To understand it, we need to know previously the total workflow of Git and GitHub, as well as some terms.</p>"},{"location":"git-and-github/git-functions/#2-the-workflow-of-git","title":"2. The workflow of Git","text":"<p>The git workflow where we can see convenient collaboration and powerful version control is mainly made by the following steps:</p> <ol> <li> <p>Forking: When you fork a repository, you create your own copy to work on.</p> </li> <li> <p>Cloning: After forking, you clone the repository to your local computer.</p> </li> <li> <p>Branch: Create a new branch for your changes, following the project\u2019s naming conventions and edit the local files in this branch to implement your updates.</p> </li> <li> <p>Update from Upstream: Fetch and merge changes from the original repository into your local branch to keep it updated. Then, push these updates from your local repository to your forked repository to maintain compatibility with the latest project state.</p> </li> <li> <p>Pull Origin(seldom use): Before starting any new modifications, always pull the latest version from your forked repository to your local environment. This practice is particularly important when you've pushed changes to your forked repository from different devices, ensuring all your work remains synchronized and preventing potential merge conflicts.</p> </li> <li> <p>Commits: Each time you save a change, Git creates a \"commit\" (a snapshot of your project at that moment).</p> </li> <li> <p>Pushing Origin: Once you've made changes, push them to your forked repository.</p> </li> <li> <p>Pull Requests: When your changes are ready, submit a Pull Request (PR) to the original repository.</p> </li> <li> <p>Merge: The original repository\u2019s maintainers review your changes and decide whether to merge them.</p> </li> </ol> <p></p> <p>Git Workflow Chart</p>"},{"location":"git-and-github/git-functions/#3-how-git-enables-version-control-and-collaboration","title":"3. How Git Enables Version Control and Collaboration","text":"<p>Git serves as a crucial tool for version control and collaboration in digital projects. It systematically tracks all changes to project files, allowing developers to manage different versions effectively. Moreover, it enables multiple teams to work concurrently. This two - fold functionality ensures that new features can be safely developed and tested in separate environments before being integrated into the main project.</p>"},{"location":"git-and-github/git-functions/#version-control","title":"Version Control","text":"<p>Git tracks changes through commits and branches, enabling precise version control. Each commit records who made the change, when it was made, and a description of the modifications.</p>"},{"location":"git-and-github/git-functions/#collaboration","title":"Collaboration","text":"<p>Anyone can contribute to the original repository from anywhere, at any time. By working in their own forked repositories and branches, collaborators avoid interference and enable parallel development.</p>"},{"location":"git-and-github/git-functions/#next-steps","title":"Next Steps","text":"<p>Now that you understand why Git and GitHub are so powerful, let's dive into how to use them with GitHub Desktop in the next section.</p>"},{"location":"git-and-github/git-introduction/","title":"Git &amp; GitHub: The Foundation of Docs Like Code","text":"<p>In this part, we will quickly have an brief introduction of Git and GitHub.</p>"},{"location":"git-and-github/git-introduction/#what-is-git","title":"What is Git?","text":"<p>Git is a distributed version control system designed to track changes in files. It serves two primary purposes:</p> <ol> <li> <p>Version Control</p> <p>Git acts like a \"time machine\" for your files, recording every change you make. This allows you to:</p> <ul> <li>Easily revert to a previous version if anything goes wrong with the current state.</li> <li>Quickly compare changes across different versions for better understanding and tracking.</li> <li>Keep a comprehensive history of your project, ensuring all updates are well-documented.</li> </ul> </li> <li> <p>Collaboration</p> <p>Git enables multiple people to work on the same project simultaneously without conflicts. Key features include:</p> <ul> <li> <p>Branching: Creating separate branches allows each participant to work independently without affecting others' edits or the main project.</p> </li> <li> <p>Merging: Seamlessly combine changes from different branches into the main branch or another target branch, ensuring that all contributions are integrated smoothly.</p> </li> <li> <p>Conflict Resolution: When two people modify the same part of a file, Git provides mechanisms to identify and resolve these conflicts, ensuring that the final version reflects the intended changes from all contributors.</p> </li> </ul> </li> </ol>"},{"location":"git-and-github/git-introduction/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a platform built on top of Git, offering tools for collaboration and code hosting:</p> <ul> <li>Host Repositories: Store your code and documentation in the cloud.</li> <li>Collaborate: Use Pull Requests to propose changes and discuss improvements.</li> <li>Social Coding: Star, Fork, and contribute to open-source projects.</li> </ul>"},{"location":"git-and-github/git-introduction/#what-is-open-source","title":"What is Open Source?","text":"<p>Open source means making the source code of a project publicly available, allowing anyone to view, modify, and distribute it. Some benefits of open source include:</p> <ul> <li>Innovation: Encourages collaboration and sharing of ideas.</li> <li>Quality: More eyes on the code lead to fewer bugs and better solutions.</li> <li>Community: Builds a global network of contributors and users.</li> </ul>"},{"location":"git-and-github/git-introduction/#famous-open-source-projects","title":"Famous Open Source Projects","text":"<p>Here are some well-known open-source projects you might have heard of:</p> AnkiDeepSeekVS CodeLanguageTool <p></p> <p></p> <p></p> <p></p>"},{"location":"git-and-github/git-introduction/#how-git-and-github-relate-to-docs-like-code","title":"How Git and GitHub Relate to Docs Like Code","text":"<p>In the Docs Like Code workflow:</p> <ul> <li>Git is used to version control your documentation, just like code.</li> <li>GitHub provides a platform for collaboration, allowing multiple contributors to work on the same documentation.</li> <li>Open Source principles align with Docs Like Code: transparency, collaboration, and sharing.</li> </ul>"},{"location":"workflows/best-practice/","title":"A \"Hello World\" in Your Path to Technical Writing","text":""},{"location":"workflows/best-practice/#docs-like-code-workflow","title":"Docs-like-code workflow","text":"<p>the docs-like-code workflow is just like the Git workflow, but need to pay more attention to two steps: branch and PR.</p> <p></p> <p>Docs-like-code Workflow Chart</p>"},{"location":"workflows/best-practice/#about-branch","title":"About Branch","text":"<p>When creating a branch and followed any edition, you should strictly follow the project\u2019s contribution guidelines. This includes not only technical details, such as naming conventions for branches, but also writing clear and meaningful commit messages, which are helpful for the project maintainers and other contributors. Here are some key points:</p> <ul> <li>Branch Naming Rules: Many projects have specific naming conventions to help identify the purpose of a branch. For example, using the feature/ prefix for new features or bugfix/ for bug fixes.</li> <li>Guidline-orinted Editting All editing operations, including adding, deleting, or modifying files, should be done according to best practices outlined in the contribution guidelines to ensure alignment with the project\u2019s overall style and structure.</li> <li>The Importance of Commit Messages: Each commit message should clearly describe the changes made and the reason behind them. This helps other developers quickly understand your intent and simplifies the code review process.</li> </ul>"},{"location":"workflows/best-practice/#about-pull-request","title":"About Pull Request","text":"<p>Submitting a Pull Request (PR) is a critical step in contributing code to a project. Beyond ensuring the quality of the code itself, providing detailed PR information and applying appropriate labels are also crucial. Here are some guiding principles for submitting PRs:</p> <ul> <li>Provide Detailed PR Information: Offer a thorough description explaining why you made the changes, what problem they solve, and how to test them. This helps reviewers understand and evaluate your contribution more effectively.</li> <li>Tag Relevant Labels: Label the PR appropriately based on the nature of the changes (e.g., enhancement, bug, documentation). This helps project maintainers classify and prioritize PRs efficiently.</li> <li>Follow the PR Template: If the project provides a PR template, make sure to use it. It usually guides you to include necessary information, ensuring the PR has enough context and detail.</li> </ul>"},{"location":"workflows/best-practice/#a-hands-on-project","title":"A hands-on project","text":"<p>Now you can take your first step on your path to Technical Writing. It's just like a \"Hello World\" in Docs-like-code. We will take a demo project to experience a simple but whole-process docs-like-code workflow.</p> <p>Now we'll practice this workflow. If you didn't watch the livestream, then you can follow this part to try.</p> <ol> <li>Read the Contribution Guidance </li> <li>Forking the original repository </li> <li>Cloning the forked repository to local computer </li> <li>Create a Branch </li> <li>Update from Upstream </li> <li>Start contribution </li> <li>Pull changes from forked repository to local env(seldom use)</li> <li>Commits your changes </li> <li>Pushing your changes to forked repository </li> <li>Create Pull Request to propose your changes to the original repository </li> <li>Wait for maintainers to review and provide feedback on your submission </li> </ol>"},{"location":"workflows/example-workflow/","title":"Real projects","text":"<p>Then I'll introduce some real project that you can try to contribution to.</p>"},{"location":"workflows/example-workflow/#pingcaptidb-docs","title":"PingCap/TiDB - docs","text":"<p>There are two documentation projects for TiDB under the PingCAP organization: English and Chinese documents. For these two documentation projects, there are several ways we can contribute. We can translate documents from Chinese to English or vice versa. Additionally, we can identify and correct any writing mistakes found within the documents, like operation steps that are incorrectly described. Remember to edit based on its Contribution Guidelines.</p> <p></p>"},{"location":"workflows/example-workflow/#fosscope","title":"FOSScope","text":"<p>For the FOSScope TranslateProject found on GitHub, this initiative focuses on the E-C translation of oversea articles in categories like talk, news, tech and so on. We can contribute to this project by selecting the awaiting articles in <code>source</code> folder and then editing by following the Contribution Guidelines. This following picture is the official website of this project on which you can read some translated articles.</p> <p></p>"},{"location":"workflows/example-workflow/#docs-like-code-chinese-localization","title":"Docs-like-code Chinese localization","text":"<p>This project focuses on translating the English website \"Docs-like-code\" into Chinese. Contributors can help by translating articles, reviewing translations, and ensuring the localized content maintains the same quality as the original. Additionally, you can contribute by identifying and correcting any errors found on the website as well.</p>"},{"location":"zh/","title":"Welcome to Path to a TCer","text":"<p>Thanks for your interest in the docs-like-code approach. This guide is designed to introduce you to this workflow within the realm of technical writing. It aims to help writers manage documentation as they would code, collaborate efficiently, and produce professional, accessible documents using tools such as Git, GitHub, Markdown, and open-source frames like MkDocs.</p>"},{"location":"zh/introduction/#why-treat-docs-like-code","title":"Why treat docs like code?","text":"<p>Treating docs like code means that make writing documents and writing codes the same way.</p> <p>Then, what does the way that code goes?</p> <p>Mostly, programmer write and manage code in the following process and tools:</p> <ol> <li>Edit code in an IDE(Integrated Development Environment) like Visual Studio Code.</li> <li>Store and review code with code hosting platform like GitHub</li> <li>Collaborate and manage different versions with Git Branches.</li> <li>Tracking issues in Github</li> <li>Publish automatically with CI/CD systems like Github Actions.</li> </ol> <p>Then, docs-like-code approach encourage us to write documents in the same process and related tools. You can see that this workflow leans heavily on Git and GitHub, which will be introduced in detail.</p> <p>For more detailed purposes and introduction, you can read the book Docs-Like-Code. This guide is mainly focused on practices.</p>"},{"location":"zh/preparation/#download-github-desktop","title":"Download GitHub Desktop","text":"<p>GitHub Desktop is an GitHub Desktop is a GUI application provided by GitHub that simplifies common Git operations, allowing users to manage Git repositories without using the command line. It is especially suitable for those who are not familiar with command-line tools(Clike to view download page).</p> <p></p> <p>GitHub DeskTop Download Page</p>"}]}